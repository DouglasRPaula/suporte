{"version":3,"file":"static/js/603.a3b6f1da.chunk.js","mappings":"8EAuCAA,EAAOC,QAAU,CAAEC,yBAZc,CAC/B,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,aAG2CC,SAxB5B,CACf,OACA,OACA,OACA,SACA,UACA,WACA,MACA,UACA,WAeqDC,OAvCxC,CACb,UACA,YACA,WACA,QACA,OACA,QACA,QACA,SACA,WACA,UACA,WACA,Y,8ICiBa,SAASC,IACtB,MAAMC,GAAiBC,EAAAA,EAAAA,KAAaC,GAAUA,EAAMC,QAAQH,iBACtDI,GAAWC,EAAAA,EAAAA,MAEXC,GAAgBC,EAAAA,EAAAA,cAAYC,UAChC,IACE,MAAMC,QAAiBC,MAAM,wCAE7B,IAAKD,EAASE,GAEZ,YADAC,EAAAA,EAAAA,GAAa,oBAADC,OAAqBJ,EAASK,aAI5C,MAAMC,QAAaN,EAASO,OAC5BZ,GAASa,EAAAA,EAAAA,IAAoBF,GAC/B,CAAE,MAAOG,IACPN,EAAAA,EAAAA,GAAa,0BAA2BM,EAC1C,IACC,CAACd,KAEJe,EAAAA,EAAAA,YAAU,KACRb,GAAe,GACd,CAACA,IAEJ,MAsBMc,EAAiBL,IACrB,MAAMM,EAAiB,GAUvB,OATAxB,EAAAA,SAASyB,SAASC,IAChB,MAAMC,EAAc1B,EAAAA,OAAO2B,KAAI,CAACC,EAAGC,KACjC,MAAMC,EAAMb,EAAKc,MACdC,GAASA,EAAKC,IAAIR,UAAYA,GAAWO,EAAKC,IAAIC,MAAQL,EAAQ,IAErE,OAAOC,EAAMA,EAAIK,MAAQ,CAAC,IAE5BZ,EAAea,KAAKV,EAAY,IAE3BH,CAAc,EAGjBc,EAAY,CAChBrC,OAAM,SACNsC,SAAUvC,EAAAA,SAAS4B,KAAI,CAACF,EAASI,KAAK,CACpCU,MAAOd,EACPR,KAAMK,EAAcpB,GAAgB2B,GACpCW,gBAAiB1C,EAAAA,yBAAyB+B,QAI9C,OACEY,EAAAA,EAAAA,KAAA,OAAKC,MAAO,CAAEC,MAAO,MAAOC,OAAQ,SAAUC,UAC5CJ,EAAAA,EAAAA,KAACK,EAAAA,GAAG,CAACC,QA/CO,CACdC,YAAY,EACZC,QAAS,CACPC,OAAQ,CACNC,SAAU,QACVnD,OAAQ,CACNoD,KAAM,CACJC,KAAM,IAERC,SAAU,KAGdC,MAAO,CACLC,SAAS,EACTC,KAAM,mBACNL,KAAM,CACJC,KAAM,OA+BapC,KAAMoB,KAGnC,CC9Ee,SAASqB,IACtB,MAAMC,GAAyBxD,EAAAA,EAAAA,KAAaC,GAAUA,EAAMC,QAAQsD,yBAC9DrD,GAAWC,EAAAA,EAAAA,MAEXC,GAAgBC,EAAAA,EAAAA,cAAYC,UAChC,IACE,MAAMC,QAAiBC,MAAM,gDAE7B,IAAKD,EAASE,GAEZ,YADAC,EAAAA,EAAAA,GAAa,oBAADC,OAAqBJ,EAASK,aAI5C,MAAMC,QAAaN,EAASO,OAC5BZ,GAASsD,EAAAA,EAAAA,IAA4B3C,GACvC,CAAE,MAAOG,IACPN,EAAAA,EAAAA,GAAa,0BAA2BM,EAC1C,IACC,CAACd,KAEJe,EAAAA,EAAAA,YAAU,KACRb,GAAe,GACd,CAACA,IAEJ,MAsBMc,EAAiBL,IACrB,MAAMM,EAAiB,GAYvB,OAVAxB,EAAAA,SAASyB,SAASC,IAChB,MAAMC,EAAc1B,EAAAA,OAAO2B,KAAI,CAACkC,EAAOhC,KACrC,MAAMxB,EAAUY,EAAKc,MAClBC,GAASA,EAAKC,IAAIR,UAAYA,GAAWO,EAAKC,IAAI4B,QAAUhC,EAAQ,IAEvE,OAAOxB,EAAUA,EAAQ8B,MAAQ,CAAC,IAEpCZ,EAAea,KAAKV,EAAY,IAG3BH,CAAc,EAEjBc,EAAY,CAChBrC,OAAM,SACNsC,SAAUvC,EAAAA,SAAS4B,KAAI,CAACF,EAASI,KAAK,CACpCU,MAAOd,EACPR,KAAMK,EAAcqC,GAAwB9B,GAC5CW,gBAAiB1C,EAAAA,yBAAyB+B,QAI9C,OACEY,EAAAA,EAAAA,KAAA,OAAKC,MAAO,CAAEC,MAAO,MAAOC,OAAQ,SAAUC,UAC5CJ,EAAAA,EAAAA,KAACK,EAAAA,GAAG,CAACC,QAhDO,CACdC,YAAY,EACZC,QAAS,CACPC,OAAQ,CACNC,SAAU,QACVnD,OAAQ,CACNoD,KAAM,CACJC,KAAM,IAERC,SAAU,KAGdC,MAAO,CACLC,SAAS,EACTC,KAAM,mCACNL,KAAM,CACJC,KAAM,OAgCapC,KAAMoB,KAGnC,CC3Ee,SAASyB,IACtB,MAAMC,GAAW5D,EAAAA,EAAAA,KAAaC,GAAUA,EAAMC,QAAQ2D,iBAChD1D,GAAWC,EAAAA,EAAAA,MAEXC,GAAgBC,EAAAA,EAAAA,cAAYC,UAChC,IACE,MAAMC,QAAiBC,MAAM,wCAE7B,IAAKD,EAASE,GAEZ,YADAC,EAAAA,EAAAA,GAAa,oBAADC,OAAqBJ,EAASK,aAI5C,MAAMC,QAAaN,EAASO,OAC5BZ,GAAS2D,EAAAA,EAAAA,IAAoBhD,GAC/B,CAAE,MAAOG,IACPN,EAAAA,EAAAA,GAAa,0BAA2BM,EAC1C,IACC,CAACd,KAEJe,EAAAA,EAAAA,YAAU,KACRb,GAAe,GACd,CAACA,IAEJ,MAsBM6B,EAAY,CAChBrC,OAAM,SACNsC,SAAU,CACR,CACEC,MAAO,wBACPtB,KAAMjB,EAAAA,OAAO2B,KAAI,CAACkC,EAAOhC,KACvB,MAAMxB,EAAU0D,EAAShC,MAAMC,GAASA,EAAKC,IAAI4B,QAAUhC,EAAQ,IACnE,OAAOxB,EAAUA,EAAQ8B,MAAQ,CAAC,IAEpCK,gBAAiB,8BAKvB,OACEC,EAAAA,EAAAA,KAAA,OAAKC,MAAO,CAAEC,MAAO,MAAOC,OAAQ,SAAUC,UAC5CJ,EAAAA,EAAAA,KAACK,EAAAA,GAAG,CAACC,QAtCO,CACdC,YAAY,EACZC,QAAS,CACPC,OAAQ,CACNC,SAAU,MACVnD,OAAQ,CACNoD,KAAM,CACJC,KAAM,IAERC,SAAU,KAGdC,MAAO,CACLC,SAAS,EACTC,KAAM,sBACNL,KAAM,CACJC,KAAM,OAsBapC,KAAMoB,KAGnC,CCjEe,SAAS6B,IACtB,MAAMH,GAAW5D,EAAAA,EAAAA,KACdC,GAAUA,EAAMC,QAAQ8D,6BAErB7D,GAAWC,EAAAA,EAAAA,MAEX6D,GAAoB3D,EAAAA,EAAAA,cAAYC,UACpC,IACE,MAAMC,QAAiBC,MAAM,oDAI7B,IAAKD,EAASE,GAEZ,YADAC,EAAAA,EAAAA,GAAa,oBAADC,OAAqBJ,EAASK,aAI5C,MAAMC,QAAaN,EAASO,OAC5BZ,GAAS+D,EAAAA,EAAAA,IAAgCpD,GAC3C,CAAE,MAAOG,IACPN,EAAAA,EAAAA,GAAa,0BAA2BM,EAC1C,IACC,CAACd,KAEJe,EAAAA,EAAAA,YAAU,KACR+C,GAAmB,GAClB,CAACA,IAEJ,MAwBM/B,EAAY,CAChBrC,OAAM,SACNsC,SAJmB,CAAC,IAAK,IAAK,IAAK,IAAK,KAIjBX,KAAK2C,IAC1B,IAAI9B,EACJ,OAAQ8B,GACN,IAAK,IACH9B,EAAkB,UAClB,MACF,IAAK,IACHA,EAAkB,UAClB,MACF,IAAK,IACHA,EAAkB,UAClB,MACF,IAAK,IACHA,EAAkB,UAClB,MACF,IAAK,IACHA,EAAkB,UAClB,MACF,QACEA,EAAkB,qBAGtB,MAAM+B,EAAU,CACdhC,MAAO+B,EACPrD,KAAM,IAAIuD,MAAM,IAAIC,KAAK,GACzBjC,mBASF,OANAuB,EAASvC,SAASnB,IACZA,EAAQ4B,IAAIqC,cAAgBA,IAC9BC,EAAQtD,KAAKZ,EAAQ4B,IAAI4B,MAAQ,IAAMxD,EAAQ8B,MACjD,IAGKoC,CAAO,KAIlB,OACE9B,EAAAA,EAAAA,KAAA,OAAKC,MAAO,CAAEC,MAAO,MAAOC,OAAQ,SAAUC,UAC5CJ,EAAAA,EAAAA,KAACK,EAAAA,GAAG,CAACC,QAlEO,CACdC,YAAY,EACZC,QAAS,CACPC,OAAQ,CACNC,SAAU,QACVnD,OAAQ,CACNoD,KAAM,CACJC,KAAM,IAERC,SAAU,KAGdC,MAAO,CACLC,SAAS,EACTC,KAAM,yBACNL,KAAM,CACJC,KAAM,OAkDapC,KAAMoB,KAGnC,CCrHe,SAASqC,EAAQC,GAAqB,IAApB,QAAE5B,EAAO,KAAE9B,GAAM0D,EAChD,OACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAehC,SAAA,EAC5BJ,EAAAA,EAAAA,KAAA,OAAKoC,UAAU,0EAAyEhC,UACtFJ,EAAAA,EAAAA,KAAA,MAAIoC,UAAU,UAAShC,SAAC,gBAE1BJ,EAAAA,EAAAA,KAAA,MAAIqC,MAAM,eAAcjC,UACtBJ,EAAAA,EAAAA,KAAA,MAAIqC,MAAM,WAAUjC,UAClBJ,EAAAA,EAAAA,KAAA,KAAGqC,MAAM,kBAAkB,eAAa,OAAOC,KAAK,WAAUlC,SAAC,cAKnE+B,EAAAA,EAAAA,MAAA,OACElC,MAAO,CACLc,QAAS,OACTwB,SAAU,OACVC,eAAgB,gBAChBpC,SAAA,EAEFJ,EAAAA,EAAAA,KAACqB,EAAc,CAACf,QAASA,EAAS9B,KAAMA,KACxCwB,EAAAA,EAAAA,KAACyB,EAAiB,CAACnB,QAASA,EAAS9B,KAAMA,KAC3CwB,EAAAA,EAAAA,KAACiB,EAAsB,CAACX,QAASA,EAAS9B,KAAMA,KAChDwB,EAAAA,EAAAA,KAACxC,EAAc,CAAC8C,QAASA,EAAS9B,KAAMA,SAIhD,CJZAiE,EAAAA,GAAQC,SACNC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,ICVFP,EAAAA,GAAQC,SACNC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,ICNFP,EAAAA,GAAQC,SACNC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,ICNFP,EAAAA,GAAQC,SACNC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,G,sEEpBa,SAAS3E,EAAY6D,GAAe,IAAd,QAAEe,GAASf,EAC9C,OACElC,EAAAA,EAAAA,KAACkD,EAAAA,EAAK,CACJC,QAAQ,SACRlD,MAAO,CAAES,SAAU,QAAS0C,IAAK,OAAQC,MAAO,OAAQC,OAAQ,MAAOlD,SAEtE6C,GAGP,C","sources":["frontend/constants/graficos.js","frontend/graficos/BugsPorEmpresa.jsx","frontend/graficos/ChamadosPorEmpresa.jsx","frontend/graficos/ChamadosPorMes.jsx","frontend/graficos/CriticidadePorMes.jsx","frontend/graficos/Graficos.jsx","frontend/modal/ErrorMessage.jsx"],"sourcesContent":["const labels = [\r\n  \"Janeiro\",\r\n  \"Fevereiro\",\r\n  \"MarÃ§o\",\r\n  \"Abril\",\r\n  \"Maio\",\r\n  \"Junho\",\r\n  \"Julho\",\r\n  \"Agosto\",\r\n  \"Setembro\",\r\n  \"Outubro\",\r\n  \"Novembro\",\r\n  \"Dezembro\",\r\n];\r\n\r\nconst empresas = [\r\n  \"CBMM\",\r\n  \"Reta\",\r\n  \"Vale\",\r\n  \"Gerdau\",\r\n  \"JMendes\",\r\n  \"Eurochem\",\r\n  \"MCA\",\r\n  \"Chammas\",\r\n  \"Samarco\",\r\n];\r\n\r\nconst empresasBackgroundColors = [\r\n  \"#355070\",\r\n  \"#6d597a\",\r\n  \"#b56576\",\r\n  \"#e56b6f\",\r\n  \"#eaac8b\",\r\n  \"#3c6e71\",\r\n  \"#499cd3\",\r\n  \"#432818\",\r\n  \"#25242292\",\r\n];\r\n\r\nmodule.exports = { empresasBackgroundColors, empresas, labels };\r\n","import {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from \"chart.js\";\r\nimport { useCallback, useEffect } from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport ErrorMessage from \"../modal/ErrorMessage\";\r\nimport { listaBugsPorEmpresa } from \"../redux/chamadosSlice\";\r\nimport {\r\n  empresas,\r\n  empresasBackgroundColors,\r\n  labels,\r\n} from \"../constants/graficos\";\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nexport default function BugsPorEmpresa() {\r\n  const bugsPorEmpresa = useSelector((state) => state.chamado.bugsPorEmpresa);\r\n  const dispatch = useDispatch();\r\n\r\n  const pegarChamados = useCallback(async () => {\r\n    try {\r\n      const response = await fetch(`http://localhost:5000/bugsPorEmpresa`);\r\n\r\n      if (!response.ok) {\r\n        ErrorMessage(`Ocorreu um erro: ${response.statusText}`);\r\n        return;\r\n      }\r\n\r\n      const data = await response.json();\r\n      dispatch(listaBugsPorEmpresa(data));\r\n    } catch (error) {\r\n      ErrorMessage(\"erro ao pegar chamados:\", error);\r\n    }\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    pegarChamados();\r\n  }, [pegarChamados]);\r\n\r\n  const options = {\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        position: \"right\",\r\n        labels: {\r\n          font: {\r\n            size: 12,\r\n          },\r\n          boxWidth: 10,\r\n        },\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: \"Bugs por empresa\",\r\n        font: {\r\n          size: 20,\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  const normalizeData = (data) => {\r\n    const normalizedData = [];\r\n    empresas.forEach((empresa) => {\r\n      const empresaData = labels.map((_, index) => {\r\n        const bug = data.find(\r\n          (item) => item._id.empresa === empresa && item._id.mes === index + 1\r\n        );\r\n        return bug ? bug.total : 0;\r\n      });\r\n      normalizedData.push(empresaData);\r\n    });\r\n    return normalizedData;\r\n  };\r\n\r\n  const chartData = {\r\n    labels,\r\n    datasets: empresas.map((empresa, index) => ({\r\n      label: empresa,\r\n      data: normalizeData(bugsPorEmpresa)[index],\r\n      backgroundColor: empresasBackgroundColors[index],\r\n    })),\r\n  };\r\n\r\n  return (\r\n    <div style={{ width: \"45%\", height: \"450px\" }}>\r\n      <Bar options={options} data={chartData} />\r\n    </div>\r\n  );\r\n}\r\n","import {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from \"chart.js\";\r\nimport { useCallback, useEffect } from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport ErrorMessage from \"../modal/ErrorMessage\";\r\nimport { listachamadosPorEmpresaEMes } from \"../redux/chamadosSlice\";\r\nimport { empresas, empresasBackgroundColors, labels } from \"../constants/graficos\";\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nexport default function ChamadosPorEmpresaEMes() {\r\n  const chamadosPorEmpresaEMes = useSelector((state) => state.chamado.chamadosPorEmpresaEMes);\r\n  const dispatch = useDispatch();\r\n\r\n  const pegarChamados = useCallback(async () => {\r\n    try {\r\n      const response = await fetch(`http://localhost:5000/chamadosPorEmpresaEMes`);\r\n\r\n      if (!response.ok) {\r\n        ErrorMessage(`Ocorreu um erro: ${response.statusText}`);\r\n        return;\r\n      }\r\n\r\n      const data = await response.json();\r\n      dispatch(listachamadosPorEmpresaEMes(data));\r\n    } catch (error) {\r\n      ErrorMessage(\"erro ao pegar chamados:\", error);\r\n    }\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    pegarChamados();\r\n  }, [pegarChamados]);\r\n\r\n  const options = {\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        position: \"right\",\r\n        labels: {\r\n          font: {\r\n            size: 12,\r\n          },\r\n          boxWidth: 10,\r\n        },\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: \"Chamados das empresas por mÃªs\",\r\n        font: {\r\n          size: 20,\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  const normalizeData = (data) => {\r\n    const normalizedData = [];\r\n  \r\n    empresas.forEach((empresa) => {\r\n      const empresaData = labels.map((month, index) => {\r\n        const chamado = data.find(\r\n          (item) => item._id.empresa === empresa && item._id.month === index + 1\r\n        );\r\n        return chamado ? chamado.total : 0;\r\n      });\r\n      normalizedData.push(empresaData);\r\n    });\r\n  \r\n    return normalizedData;\r\n  };\r\n  const chartData = {\r\n    labels,\r\n    datasets: empresas.map((empresa, index) => ({\r\n      label: empresa,\r\n      data: normalizeData(chamadosPorEmpresaEMes)[index],\r\n      backgroundColor: empresasBackgroundColors[index],\r\n    })),\r\n  };\r\n\r\n  return (\r\n    <div style={{ width: \"45%\", height: \"450px\" }}>\r\n      <Bar options={options} data={chartData} />\r\n    </div>\r\n  );\r\n}\r\n","import {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from \"chart.js\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport { useCallback, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport ErrorMessage from \"../modal/ErrorMessage\";\r\nimport { listaChamadosPorMes } from \"../redux/chamadosSlice\";\r\nimport { labels } from \"../constants/graficos\";\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nexport default function ChamadosPorMes() {\r\n  const chamados = useSelector((state) => state.chamado.chamadosPorMes);\r\n  const dispatch = useDispatch();\r\n\r\n  const pegarChamados = useCallback(async () => {\r\n    try {\r\n      const response = await fetch(`http://localhost:5000/chamadosPorMes`);\r\n\r\n      if (!response.ok) {\r\n        ErrorMessage(`Ocorreu um erro: ${response.statusText}`);\r\n        return;\r\n      }\r\n\r\n      const data = await response.json();\r\n      dispatch(listaChamadosPorMes(data));\r\n    } catch (error) {\r\n      ErrorMessage(\"erro ao pegar chamados:\", error);\r\n    }\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    pegarChamados();\r\n  }, [pegarChamados]);\r\n\r\n  const options = {\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        position: \"top\",\r\n        labels: {\r\n          font: {\r\n            size: 12,\r\n          },\r\n          boxWidth: 10,\r\n        },\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: \"Chamados por mÃªs\",\r\n        font: {\r\n          size: 20,\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  const chartData = {\r\n    labels,\r\n    datasets: [\r\n      {\r\n        label: \"NÃºmero de chamados\",\r\n        data: labels.map((month, index) => {\r\n          const chamado = chamados.find((item) => item._id.month === index + 1);\r\n          return chamado ? chamado.total : 0;\r\n        }),\r\n        backgroundColor: \"rgba(233, 23, 23, 0.521)\",\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <div style={{ width: \"45%\", height: \"450px\" }}>\r\n      <Bar options={options} data={chartData} />\r\n    </div>\r\n  );\r\n}\r\n","import {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from \"chart.js\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport ErrorMessage from \"../modal/ErrorMessage\";\r\nimport { listaChamadosPorMesECriticidade } from \"../redux/chamadosSlice\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useCallback, useEffect } from \"react\";\r\nimport { labels } from \"../constants/graficos\";\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nexport default function CriticidadePorMes() {\r\n  const chamados = useSelector(\r\n    (state) => state.chamado.chamadosPorMesECriticidade\r\n  );\r\n  const dispatch = useDispatch();\r\n\r\n  const pegarCriticidades = useCallback(async () => {\r\n    try {\r\n      const response = await fetch(\r\n        `http://localhost:5000/chamadosPorMesECriticidade`\r\n      );\r\n\r\n      if (!response.ok) {\r\n        ErrorMessage(`Ocorreu um erro: ${response.statusText}`);\r\n        return;\r\n      }\r\n\r\n      const data = await response.json();\r\n      dispatch(listaChamadosPorMesECriticidade(data));\r\n    } catch (error) {\r\n      ErrorMessage(\"erro ao pegar chamados:\", error);\r\n    }\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    pegarCriticidades();\r\n  }, [pegarCriticidades]);\r\n\r\n  const options = {\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        position: \"right\",\r\n        labels: {\r\n          font: {\r\n            size: 12,\r\n          },\r\n          boxWidth: 10,\r\n        },\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: \"Criticidade por mÃªs\",\r\n        font: {\r\n          size: 20,\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  const criticidades = [\"1\", \"2\", \"3\", \"4\", \"5\"];\r\n\r\n  const chartData = {\r\n    labels,\r\n    datasets: criticidades.map((criticidade) => {\r\n      let backgroundColor;\r\n      switch (criticidade) {\r\n        case \"1\":\r\n          backgroundColor = \"#d62828\";\r\n          break;\r\n        case \"2\":\r\n          backgroundColor = \"#f77f00\";\r\n          break;\r\n        case \"3\":\r\n          backgroundColor = \"#fcbf49\";\r\n          break;\r\n        case \"4\":\r\n          backgroundColor = \"#81b29a\";\r\n          break;\r\n        case \"5\":\r\n          backgroundColor = \"#eae2b7\";\r\n          break;\r\n        default:\r\n          backgroundColor = \"rgba(0, 0, 0, 0.5)\";\r\n      }\r\n\r\n      const dataset = {\r\n        label: criticidade,\r\n        data: new Array(12).fill(0),\r\n        backgroundColor,\r\n      };\r\n\r\n      chamados.forEach((chamado) => {\r\n        if (chamado._id.criticidade === criticidade) {\r\n          dataset.data[chamado._id.month - 1] += chamado.total;\r\n        }\r\n      });\r\n\r\n      return dataset;\r\n    }),\r\n  };\r\n\r\n  return (\r\n    <div style={{ width: \"45%\", height: \"450px\" }}>\r\n      <Bar options={options} data={chartData} />\r\n    </div>\r\n  );\r\n}\r\n","import BugsPorEmpresa from \"./BugsPorEmpresa\";\r\nimport ChamadosPorEmpresaEMes from \"./ChamadosPorEmpresa\";\r\nimport ChamadosPorMes from \"./ChamadosPorMes\";\r\nimport CriticidadePorMes from \"./CriticidadePorMes\";\r\n\r\nexport default function Graficos({ options, data }) {\r\n  return (\r\n    <div className=\"my-2 app-name\">\r\n      <div className=\"d-flex justify-content-between flex-nowrap align-items-center pb-2 mb-3\">\r\n        <h1 className=\"h4 mb-0\">Metricas</h1>\r\n      </div>\r\n      <ul class=\"nav nav-tabs\">\r\n        <li class=\"nav-item\">\r\n          <a class=\"nav-link active\" aria-current=\"page\" href=\"metricas\">\r\n            2024\r\n          </a>\r\n        </li>\r\n      </ul>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexWrap: \"wrap\",\r\n          justifyContent: \"space-around\",\r\n        }}\r\n      >\r\n        <ChamadosPorMes options={options} data={data} />\r\n        <CriticidadePorMes options={options} data={data} />\r\n        <ChamadosPorEmpresaEMes options={options} data={data} />\r\n        <BugsPorEmpresa options={options} data={data} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import Alert from \"react-bootstrap/Alert\";\r\n\r\nexport default function ErrorMessage({ message }) {\r\n  return (\r\n    <Alert\r\n      variant=\"danger\"\r\n      style={{ position: \"fixed\", top: \"20px\", right: \"20px\", zIndex: 9999 }}\r\n    >\r\n      {message}\r\n    </Alert>\r\n  );\r\n}\r\n"],"names":["module","exports","empresasBackgroundColors","empresas","labels","BugsPorEmpresa","bugsPorEmpresa","useSelector","state","chamado","dispatch","useDispatch","pegarChamados","useCallback","async","response","fetch","ok","ErrorMessage","concat","statusText","data","json","listaBugsPorEmpresa","error","useEffect","normalizeData","normalizedData","forEach","empresa","empresaData","map","_","index","bug","find","item","_id","mes","total","push","chartData","datasets","label","backgroundColor","_jsx","style","width","height","children","Bar","options","responsive","plugins","legend","position","font","size","boxWidth","title","display","text","ChamadosPorEmpresaEMes","chamadosPorEmpresaEMes","listachamadosPorEmpresaEMes","month","ChamadosPorMes","chamados","chamadosPorMes","listaChamadosPorMes","CriticidadePorMes","chamadosPorMesECriticidade","pegarCriticidades","listaChamadosPorMesECriticidade","criticidade","dataset","Array","fill","Graficos","_ref","_jsxs","className","class","href","flexWrap","justifyContent","ChartJS","register","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","message","Alert","variant","top","right","zIndex"],"sourceRoot":""}